#Projet Compression Huffman
#Etape 1: Determination de l'alphabet et de la frequences des caracteres

def freq(message):
    '''Prend en parametre un texte, 
    et renvoie la liste des caracteres qui le composent avec leur nombre d'occurence.'''
    oc=[]
    caract=[]
    for i in message:
        if i not in caract:
            nb=message.count(i)
            caract.append(i)
            oc+=[[i,nb]]
    return oc

def freq_croissante(oc):
    '''Prend en parametre une liste de caractere avec leur occurrence,
    et renvoie cette liste triee par odre croissant de frequence.'''
    l=[]
    while oc!=[]:
        a=oc[0]
        for i in oc:
            if a[1]<i[1]:
                a=i
        l.insert(0,a)
        oc.remove(a)
    return l 

def ascii_croissante(oc):
    '''Prend en parametre une liste de caracteres avec leur frequence,
    essaie de renvoyer la liste triee dans l'ordre croissant par rapport à la fréquence et le code ascii'''
    l=freq_croissante(oc)
    l2=[]    
    l3=[]
    while l!=[]:
        l2=[l[0]]
        l.pop(0)
        if l!=[]:
            while l[0][1]==l2[0][1]:
                l2.append(l[0])
                l.pop(0)
        l4=[]
        while l2!=[]:
            a=l2[0]
            for j in l2:
                if ord(a[0])<ord(j[0]):
                    a=j
            l4.insert(0,a)
            l2.remove(a)
        l3+=l4
    return l3      

#Etape 2: Construction de l'arbre
    
class Tree: 
    '''Un arbre est represente par son noeud racine,
    compose d'un caractere, de la frequence du caractere, de son code, et de ses enfants gauche et droit.'''
    def __init__(self,caractere,frequence,code,left_child,right_child):
        self.car=caractere
        self.f=frequence
        self.c=code
        self.lc=left_child
        self.rc=right_child
        
def abr_bis(l_Tree):
     '''Prend une liste d'arbre,
     et creer un nouvel arbre a partir des deux arbres de plus basse frequence 
     avant de retirer de la liste ces deux derniers arbres.'''
     min1=Tree(None,0,[],None,None)
     min2=Tree(None,0,[],None,None)
     for i in range (len(l_Tree)):
         if l_Tree[i].f<min2.f or min2.f==0:
             if l_Tree[i].f<min1.f or min1.f==0:
                 min2,min1=min1,l_Tree[i]
             else:
                 min2=l_Tree[i]
     t=Tree(None,min1.f+min2.f,None,min1,min2)
     l_Tree.remove(min1)
     l_Tree.remove(min2)
     l_Tree.append(t)
     return l_Tree
    
def abr(l_Tree):
    '''Creer un seul arbre a partir des arbres de la liste (dans la liste)'''
    while len(l_Tree)!=1:
        abr_bis(l_Tree)

#Etape 3: Codage du texte
def encodage(T):
    '''Code les caracteres a partir de la racine de l'arbre'''
    if T.c==None:
        T.c=''
    if T.lc!=None:
        T.lc.c=T.c+'0'
        encodage(T.lc)
    if T.rc!=None:
        T.rc.c=T.c+'1'
        encodage(T.rc)

def code_car(T,car):
    '''Prend en parametre l'abre d'encodage et le caractere que l'on souhaite coder
    et renvoie le code du caractere'''
    if T.car==car:
        return T.c
    else:
        if T.lc!=None:
            lc=code_car(T.lc,car)
        if T.rc!=None:
            rc=code_car(T.rc,car)
        if (T.lc==None and T.rc==None) or (lc==None and rc==None):
            return None
        if lc!=None:
            return lc
        if rc!=None:
            return rc
    
def fausse_compression(message,T):
    '''Prend en parametre un texte et son arbre de code
    et renvoie le message en ayant remplacer chacun de ses caracteres 
    par sa representation binaire sous forme de str'''
    m=''
    for i in message:
        for j in i:
            m+=code_car(T,j)
    return m
    
